<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MarkDown常用語法</title>
    <url>/MarkDown%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>畢竟這個部落格是以 MarkDown 語法寫成的，那就必須要了解一些常用的才能寫出<del>炫炮(X</del>有用又清楚的文章啊！以下的筆記是我看了官方文件以及其他大大的文章整理而成的，有常見的、也有可能用不到的，但沒關係先寫下來再說 ∠( ᐛ 」∠)＿</p>
<h1 id="區塊元素"><a href="#區塊元素" class="headerlink" title="區塊元素"></a>區塊元素</h1><ul>
<li><h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><ul>
<li>語法：井字符號<code>#</code>加空格</li>
<li>說明：井字符號<code>#</code>數量對應 html tag 的 <code>h1 ~ h6</code></li>
<li>實例：<blockquote>
<h3 id="h3-標題示範"><a href="#h3-標題示範" class="headerlink" title="h3 標題示範"></a>h3 標題示範</h3><h4 id="h4-標題示範"><a href="#h4-標題示範" class="headerlink" title="h4 標題示範"></a>h4 標題示範</h4><h5 id="h5-標題示範"><a href="#h5-標題示範" class="headerlink" title="h5 標題示範"></a>h5 標題示範</h5></blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### h3 標題示範</span></span><br><span class="line"><span class="section">#### h4 標題示範</span></span><br><span class="line"><span class="section">##### h5 標題示範</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<!--show-->

<ul>
<li><h2 id="引用、階層"><a href="#引用、階層" class="headerlink" title="引用、階層"></a>引用、階層</h2><ul>
<li>語法：大於符號<code>&gt;</code>加空格</li>
<li>說明：大於符號<code>&gt;</code>的數量越多，階層數量就越多</li>
<li>實例：<br>第一層<blockquote>
<p>第二層</p>
<blockquote>
<p>第三層</p>
<blockquote>
<p>第四層</p>
<blockquote>
<p>第五層</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">第一層</span><br><span class="line"><span class="quote">&gt; 第二層</span></span><br><span class="line"><span class="quote">&gt; &gt; 第三層</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第四層</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; &gt; 第五層</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h2><ol>
<li><h3 id="有數字序位的"><a href="#有數字序位的" class="headerlink" title="有數字序位的"></a>有數字序位的</h3></li>
</ol>
<ul>
<li>語法：數字<code>123</code>加點<code>.</code>加空格</li>
<li>說明：可以依照你想要的序位開始寫，不強迫以 1 作為開頭</li>
<li>實例：<blockquote>
<ol start="3">
<li>這是排第一個的第三點</li>
<li>這是排第二個的第四點</li>
<li>這是排第三個的第五點</li>
</ol>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">3.</span> 這是排第一個的第三點</span><br><span class="line"><span class="bullet">4.</span> 這是排第二個的第四點</span><br><span class="line"><span class="bullet">5.</span> 這是排第三個的第五點</span><br></pre></td></tr></table></figure></li>
<li>補充：如果有需要寫出數字加點<code>.</code>的組合，但不想要他變成清單的話，可以在數字與點<code>.</code>之間加上反斜線<code>/</code></li>
</ul>
<ol start="2">
<li><h3 id="沒有數字序位的"><a href="#沒有數字序位的" class="headerlink" title="沒有數字序位的"></a>沒有數字序位的</h3></li>
</ol>
<ul>
<li>語法：減號<code>-</code>&#x2F;加號<code>+</code>&#x2F;米字號<code>*</code>加空格</li>
<li>說明：減號<code>-</code>、加號<code>+</code>、米字號<code>*</code>擇一都可以，不過我的 VScode 有裝自動排版（Auto Format）的插件，打加號或米字號它會自動幫我改成減號 XD</li>
<li>實例：<blockquote>
<ul>
<li>這是沒有數字的列點</li>
</ul>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 減號</span><br><span class="line"><span class="bullet">+</span> 加號</span><br><span class="line"><span class="bullet">*</span> 米字號</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h2><ul>
<li>語法：在程式碼的前後各用三個反引號<code>```</code>包住</li>
<li>說明：在第一個反引號旁，視情況可以選擇註明使用的語言（可以顯示該語言的 highlight）、該程式碼區塊的說明文字、網址、超連結顯示的文字，需依照此順序寫</li>
<li>實例：<blockquote>
<figure class="highlight css"><figcaption><span>說明文字會顯示在這邊</span><a href="https://iam-cj.github.io/">西噘的不專業筆記</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line"><span class="attribute">background-color</span>:black;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">```CSS 說明文字會顯示在這邊 https://iam-cj.github.io/ 西噘的不專業筆記</span></span><br><span class="line"><span class="code">color:red;</span></span><br><span class="line"><span class="code">background-color:black;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><ul>
<li>語法：三個減號<code>---</code>或三個米字號<code>***</code></li>
<li>說明：這次我打三個減號，我的 Auto Format 會把減號轉成米字號 XD</li>
<li>實例：<blockquote>
<p>下面這條就是分隔線</p>
<hr>
<p>上面這條就是分隔線</p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="行內元素"><a href="#行內元素" class="headerlink" title="行內元素"></a>行內元素</h1><ul>
<li><h2 id="各種文字效果"><a href="#各種文字效果" class="headerlink" title="各種文字效果"></a>各種文字效果</h2><ol>
<li><h3 id="斜體"><a href="#斜體" class="headerlink" title="斜體"></a>斜體</h3></li>
</ol>
<ul>
<li>語法：在文字前後加上米字號<code>*</code>或底線<code>_</code></li>
<li>實例：<blockquote>
<p><em>斜體文字</em></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜體文字*</span></span><br><span class="line"><span class="emphasis">_斜體文字_</span></span><br></pre></td></tr></table></figure></li>
<li>補充：如果單純想要顯示<code>*</code>或<code>_</code>，在符號前後加空格即可</li>
</ul>
<ol start="2">
<li><h3 id="粗體、強調"><a href="#粗體、強調" class="headerlink" title="粗體、強調"></a>粗體、強調</h3></li>
</ol>
<ul>
<li>語法：在文字前後加上兩個米字號<code>**</code>或兩個底線<code>__</code></li>
<li>實例：<blockquote>
<p><strong>粗體文字</strong></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="strong">**粗體文字**</span></span><br><span class="line"><span class="strong">__粗體文字__</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><h3 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h3></li>
</ol>
<ul>
<li>語法：在文字前後加上兩個波浪號<code>~~</code></li>
<li>實例：<blockquote>
<p><del>被刪除了</del></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">~~被刪除了~~</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><h3 id="文字顏色及大小"><a href="#文字顏色及大小" class="headerlink" title="文字顏色及大小"></a>文字顏色及大小</h3></li>
</ol>
<ul>
<li>語法：在文字前後用<code>&lt;font&gt;&lt;/font&gt;</code>包住，並在內部寫 style</li>
<li>實例：<blockquote>
<p><font style="color:green;font-size:15px;">這是一段大小為 15px 的綠色文字</font></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">&quot;color:green;font-size:15px;&quot;</span>&gt;</span></span>這是一段大小為15px的綠色文字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="行內程式碼"><a href="#行內程式碼" class="headerlink" title="行內程式碼"></a>行內程式碼</h2><ul>
<li>語法：在程式碼前後加上反引號<code>`</code></li>
<li>實例：<blockquote>
<p><code>&lt;hr/&gt;</code></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`&lt;hr/&gt;`</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul>
<li>語法：用這個符號<code>|</code>手動畫表格，在文字前後加冒號<code>:</code>可以更改文字對齊方向</li>
<li>說明：冒號<code>:</code>加在哪邊，就表示往哪個方向靠齊，都加的話表示置中。<br>另外小碎念個，我隨手搜尋一下沒有找到<code>|</code>中文的名稱，只找到英文叫做 vertical bar</li>
<li>實例：<blockquote>
<table>
<thead>
<tr>
<th align="left">日期</th>
<th align="center">時間</th>
<th align="right">事件</th>
</tr>
</thead>
<tbody><tr>
<td align="left">4&#x2F;25</td>
<td align="center">18:00</td>
<td align="right">吃晚餐</td>
</tr>
</tbody></table>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">| 日期 | 時間  |   事件 |</span><br><span class="line">| :--- | :---: | -----: | //似乎需要有這段才會被網頁辨識成表格</span><br><span class="line">| 4/25 | 18:00 | 吃晚餐 |</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="超連結"><a href="#超連結" class="headerlink" title="超連結"></a>超連結</h2><ul>
<li>語法：<code>[想要顯示的文字](網址路徑)</code></li>
<li>說明：使用中括號<code>[]</code>將想要顯示的文字（例如網站名稱）包起來，後面用括號<code>()</code>將想要插入的連結放進去，中括號與括號間不要有空格</li>
<li>實例：<blockquote>
<p><a href="https://iam-cj.github.io/">西噘的不專業筆記</a></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">西噘的不專業筆記</span>](<span class="link">https://iam-cj.github.io/</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="插入圖片"><a href="#插入圖片" class="headerlink" title="插入圖片"></a>插入圖片</h2><ul>
<li>語法：<code>![圖片名稱](圖片路徑)</code></li>
<li>說明：跟超連結的語法相似，但不同的是最前方有驚嘆號<code>!</code>，中括號<code>[]</code>內放圖片名稱，後面括號<code>()</code>放入圖片連結，符號之間不要有空格</li>
<li>實例：<blockquote>
<p><img src="https://images.pexels.com/photos/546819/pexels-photo-546819.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1" alt="這是一張程式碼的圖片"><br>圖片來源為免費圖庫<a href="https://www.pexels.com/zh-tw/">Pexels</a></p>
</blockquote>
</li>
<li>程式碼：<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">這是一張程式碼的圖片</span>](<span class="link">https://images.pexels.com/photos/546819/pexels-photo-546819.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://markdown.tw/">Markdown 文件</a></li>
<li><a href="https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/">十分鐘快速掌握 Markdown</a></li>
<li><a href="https://jimmywei01.github.io/2019/05/09/MarkDown%E3%80%81Hexo%E3%80%81NexT-%E5%B8%B8%E7%94%A8%E5%AF%AB%E6%B3%95/">MarkDown、Hexo、NexT 常用寫法</a></li>
</ul>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>【作品集】就。很。Pro | Procreate 中文筆刷資源網</title>
    <url>/%E3%80%90%E4%BD%9C%E5%93%81%E9%9B%86%E3%80%91%E5%B0%B1%E3%80%82%E5%BE%88%E3%80%82Pro%20Procreate%20%E4%B8%AD%E6%96%87%E7%AD%86%E5%88%B7%E8%B3%87%E6%BA%90%E7%B6%B2/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>一個以 Procreate（ios 系統知名付費繪圖軟體）筆刷為主要商品的模擬電商網站。<br>如需參照原始碼（Vue 框架），可以移至 <a href="https://github.com/iam-CJ/SideProject_1_Vue-structure">我的 GitHub</a> 瀏覽。</p>
<h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><blockquote>
<p><a href="https://iam-cj.github.io/SideProject_1/">就。很。Pro | Procreate 中文筆刷資源網</a></p>
</blockquote>
<img alt="homepage-preview" width="500" height="500" src="https://raw.githubusercontent.com/iam-CJ/SideProject_1/e4dfbe7a3cfbbb54df5bd4d9b15cd87d7f762656/%E9%A6%96%E9%A0%81%E9%A0%90%E8%A6%BD%E5%9C%96.png"/>

<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li><strong>具備 RWD：</strong>隨螢幕尺寸變化，網頁排版及大小也會隨著變化，目前主要以螢幕寬為 390px(像素)、768px、1440px 是最適合瀏覽之尺寸。</li>
<li><strong>收藏商品：</strong>可於各類商品頁對喜愛的商品點擊【♡】愛心圖示將其加入收藏，並且可以在螢幕右上角的【我的收藏】（使用手機者則是【🖤】愛心圖示）內瀏覽或移除收藏項目。</li>
<li><strong>會員登入：</strong>第一次從首頁要跳轉至其他頁時，會需要登入（帳號密碼皆為 123），但此功能尚不完善，登入後不會有變化也無法登出。</li>
</ul>
<h1 id="製作動機"><a href="#製作動機" class="headerlink" title="製作動機"></a>製作動機</h1><ol>
<li><p><strong>目前無繁體中文平台、網路上的資源分散：</strong><br>本身作為此繪畫 app 使用者，在尋找筆刷及紙質參考的資源時會感到有些麻煩，因為沒有繁中的平台集結，多是英文、簡體中文的平台；另外也有很多都是分享在個人的部落格，資源到處分散，會覺得看到眼花撩亂。</p>
</li>
<li><p><strong>對於其他網站的疑慮：</strong><br>有很多時候用中文會找不到想要的筆刷，需要改成打英文關鍵字才能找到，但找到後又會擔心是詐騙網站，下載後電腦或平板可能會中毒或洩漏個資。</p>
</li>
</ol>
<h1 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h1><ul>
<li><strong>HTML、CSS、JavaScript：</strong>最初我僅使用最基本的三大語言將網站架構起來，並且多數樣式是自己手刻的，直到需要寫的 CSS 樣式以及網站結構規模變大、變複雜時，才加入 SCSS 及 Vue 框架等工具。</li>
<li><strong>CSS 預處理器－SCSS：</strong>選擇使用 SCSS 的原因是，它提供了巢狀結構的寫法，並且可以透過變數來統一管理高重複性的樣式。對我而言，這樣做可以方便的查找和調整樣式，並且快速套用固定元素的樣式，大大減少了上下翻找確認樣式的時間。</li>
<li><strong>Vue 框架－Vue Cli、Vue Router：</strong>加入 Vue 框架是因為我想要新增收藏商品以及會員登入功能。選擇 Vue 框架是因為它在處理資料與畫面很直覺易懂；此外，以各商品類別頁為例，透過 router 控制傳遞的參數，我可以輕鬆的改變網頁內容（改變顯示的商品類別），不用像之前只使用三大語言，每一個商品類別都需要建立一個頁面。</li>
</ul>
<h1 id="未來待新增的功能"><a href="#未來待新增的功能" class="headerlink" title="未來待新增的功能"></a>未來待新增的功能</h1><ul>
<li>會員登入後，增加可見資訊（如放入購物車的商品、及會員資料等）</li>
<li>購物車功能，可計算所有放入購物車商品的累計金額</li>
<li>搜尋功能，輸入關鍵字後列出符合的商品清單，並且可以透過點擊跳轉至該商品介紹頁</li>
</ul>
]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>作品集</tag>
      </tags>
  </entry>
  <entry>
    <title>【作品集】新竹市違規照相桿地圖</title>
    <url>/%E3%80%90%E4%BD%9C%E5%93%81%E9%9B%86%E3%80%91%E6%96%B0%E7%AB%B9%E5%B8%82%E9%81%95%E8%A6%8F%E7%85%A7%E7%9B%B8%E6%A1%BF%E5%9C%B0%E5%9C%96/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>可以查詢新竹市內設有違規自動照相固定桿之位置，照相桿類型包含移動式照相桿、測速、違規停車、科技執法等，資料來自新竹市政府開放資料平台之最新資料(111.12.28)。<br>如需參照原始碼，可以移至 <a href="https://github.com/iam-CJ/SideProject_2">我的 GitHub</a> 瀏覽。</p>
<h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><blockquote>
<p><a href="https://iam-cj.github.io/SideProject_2/">新竹市違規自動照相桿地圖</a></p>
</blockquote>
<img alt="homepage-preview" width="700" height="300" src="https://raw.githubusercontent.com/iam-CJ/SideProject_2/7592c597d98e62bb7eb5fe4e27b3884243fc9d1a/%E9%A0%90%E8%A6%BD%E5%9C%96.png"/>

<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li><strong>具備 RWD：</strong>隨螢幕尺寸變化，網頁排版及大小也會隨著變化。</li>
<li><strong>可選取地區、街道以縮小搜尋範圍：</strong>可以透過網頁上方選單選取想要查看的路段，精簡顯示的結果讓使用者能一目了然。</li>
<li><strong>科技執法照相桿篩選按鈕：</strong>因應近幾年各地增設科技執法照相桿，切換按鈕可快速得知科技執法照相桿之設置地點。</li>
<li><strong>顯示搜尋結果筆數：</strong>避免結果出現在當前所看到的地圖範圍以外而難以察覺，提供結果數來提醒使用者可以移動地圖去做查閱。</li>
<li><strong>點擊座標可瀏覽更詳細資訊：</strong>查詢結果會以座標圖示出現在地圖上，如果想要了解該照相桿之速限及類型，可以點擊座標圖示進一步查看。</li>
</ul>
<h1 id="製作動機"><a href="#製作動機" class="headerlink" title="製作動機"></a>製作動機</h1><ol>
<li><strong>練習接外部資料並處理：</strong><br>由於上一份作品之資料來源都存於本機，因此這次想要嘗試運用外部資料來製作作品，並且練習觀察資料結構、發想能如何運用。</li>
<li><strong>近期增設許多科技執法照相桿：</strong><br>近幾年各地開始增設科技執法照相桿，若平時沒有看新聞或追蹤相關資訊的習慣，容易錯過消息；另外對於不熟當地或是對路名不敏感的人，即便得知在哪個路口，沒有看到地圖可能還是不夠清楚。</li>
</ol>
<h1 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h1><ul>
<li><strong>Bootstrap：</strong>利用其預設的 CSS 樣式，快速建立整齊、美觀的介面。</li>
<li><strong>OpenStreetMap、Leaflet：</strong>地圖的顯示是使用免費開源圖資－OpenStreetMap，而設定地圖縮放大小、預設顯示位置以及設立座標等功能，則是使用 Leaflet 這個開源的 JavaScript library 來製作。</li>
<li><strong>Vue 框架－Vue Cli：</strong>運用 Vue 其雙向綁定的特性，資料畫面會同步更新，在處理上更省事。</li>
<li><strong>Axios、Vue-Axios：</strong>使用 Axios 來引入及讀取來自外部的 Json 檔。</li>
</ul>
]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>作品集</tag>
      </tags>
  </entry>
  <entry>
    <title>【用嬰兒都學得會的教材學JS】學習筆記－系列（一）</title>
    <url>/%E3%80%90%E7%94%A8%E5%AC%B0%E5%85%92%E9%83%BD%E5%AD%B8%E5%BE%97%E6%9C%83%E7%9A%84%E6%95%99%E6%9D%90%E5%AD%B8JS%E3%80%91%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>其實我在上完職訓課程之後一直有個困擾，除了沒學到框架以外，就是我 JS 的程度停留在能夠基礎操作，好像都會但深入問就被問倒，也抓不太清楚自己還不會的範圍。<br>然而，我在苦惱之際突然靈光一閃，想到在臉書社團看過阿川大大在宣傳自己的課程，點開介紹後了解課程設計是以寫小專案的方式學 JS，而我喜歡邊做邊學，印象更深刻也比較有趣，就這樣開啟了學習的旅程 ∠( ᐛ 」∠)＿<br><font style="font-size:15px;color:grey;">p.s.本系列標題是來自站長阿川大大將這份教材取名為自學網頁の嬰兒教材</font></p>
<h1 id="課程開始"><a href="#課程開始" class="headerlink" title="課程開始"></a>課程開始</h1><h2 id="第一課－基本的函數操作、onclick-事件"><a href="#第一課－基本的函數操作、onclick-事件" class="headerlink" title="第一課－基本的函數操作、onclick 事件"></a>第一課－基本的函數操作、onclick 事件</h2><ul>
<li>課程概要：介紹 onclick<blockquote>
<p>作業說明：在 html tag 中，加入 onclick 事件，寫出一個點擊按鈕後跳出 alert 的功能<br><a href="https://jsfiddle.net/iamCJ/135yh0pv/">https://jsfiddle.net/iamCJ/135yh0pv/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第二課－基本的變數操作、從-html-取得內容"><a href="#第二課－基本的變數操作、從-html-取得內容" class="headerlink" title="第二課－基本的變數操作、從 html 取得內容"></a>第二課－基本的變數操作、從 html 取得內容</h2><ul>
<li>課程概要：教導如何使用<code>getElementById</code>抓取 html 的內容</li>
<li>作業心得：最近都在寫 Vue，忘記宣告變數要放在 function 裡面，才會重新抓 input 裡的值<blockquote>
<p>作業說明：透過<code>getElementById().value</code>抓取 input 內容，用變數存取並使用<br><a href="https://jsfiddle.net/iamCJ/ewy6bak2/">https://jsfiddle.net/iamCJ/ewy6bak2/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第三課－修改-html-的內容"><a href="#第三課－修改-html-的內容" class="headerlink" title="第三課－修改 html 的內容"></a>第三課－修改 html 的內容</h2><ul>
<li>課程概要：用選取器選取元素後，可以使用<code>.textContent</code>在 tag 裡新增內容</li>
<li>自己補充：這個方式會直接覆蓋 tag 原有的內容<blockquote>
<p>作業說明：使用<code>.textContent</code>讓某個區塊的內容可以隨著 input 裡的值做更動<br><a href="https://jsfiddle.net/iamCJ/bm6xovej/">https://jsfiddle.net/iamCJ/bm6xovej/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第四課－基本的陣列操作"><a href="#第四課－基本的陣列操作" class="headerlink" title="第四課－基本的陣列操作"></a>第四課－基本的陣列操作</h2><ul>
<li>課程概要：<ol>
<li>陣列的長相<code>[]</code>、索引的使用<code>array[index]</code></li>
<li>選單元素會有以下屬性可以使用：<ol>
<li><code>.selectedIndex</code>：可以讓我們取得<strong>被選取到</strong>的選項索引</li>
<li><code>.options</code>：會以陣列型態列出所有<code>&lt;option&gt;</code>，而單一個<code>&lt;option&gt;</code>又會是物件型態<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">options = [&#123; option1 &#125;, &#123; option2 &#125;, &#123; option3 &#125;];</span><br></pre></td></tr></table></figure></li>
<li><code>.value</code>、<code>.text</code>：單一個<code>&lt;option&gt;</code>可以透過這兩個屬性來進一步取得他的 value 以及打在選項上的字</li>
</ol>
</li>
</ol>
</li>
<li>作業心得：對我來說，把樣式弄漂亮比較麻煩 XD，所以我想先以寫好功能為重點<blockquote>
<p>作業說明：透過<code>.selectedIndex</code>及<code>option.text</code>的屬性，將使用者選擇的選項顯示在下面的表單中<br><a href="https://jsfiddle.net/iamCJ/cdw6k4us/">https://jsfiddle.net/iamCJ/cdw6k4us/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第五課－基本的-if-x2F-else-條件流程控制"><a href="#第五課－基本的-if-x2F-else-條件流程控制" class="headerlink" title="第五課－基本的 if&#x2F;else 條件流程控制"></a>第五課－基本的 if&#x2F;else 條件流程控制</h2><ul>
<li>課程概要：<ol>
<li>介紹流程控制 if&#x2F;else</li>
<li>變數賦值是一個等號<code>=</code>、真正的等於是兩個等號<code>==</code></li>
</ol>
</li>
<li>自己補充：之後還有一個全等於是三個等號<code>===</code><blockquote>
<p>作業說明：透過 if&#x2F;else 判斷使用者選取的選項，進而 alert 相對應的內容<br><a href="https://jsfiddle.net/iamCJ/9qmya12j/">https://jsfiddle.net/iamCJ/9qmya12j/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第六課－認識資料型態與轉換"><a href="#第六課－認識資料型態與轉換" class="headerlink" title="第六課－認識資料型態與轉換"></a>第六課－認識資料型態與轉換</h2><ul>
<li>課程概要：<ol>
<li>認識<strong>數字</strong>資料型態<ol>
<li>數字可以做加減乘除運算</li>
<li>要分清楚資料型態是<strong>字串</strong>還是<strong>數字</strong>，雖然仍可做運算、不會報錯，但不鼓勵這樣混用，建議將資料轉型</li>
</ol>
</li>
<li>轉換資料型態<ol>
<li><strong>數值</strong>轉<strong>字串</strong>可以用<code>.toString()</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> c = a + b.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure></li>
<li><strong>字串</strong>轉<strong>數值</strong>可以用<code>parseInt()</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">parseInt</span>(a) + b;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>我們在 JS 透過<code>getElementByXX</code>或<code>querySelector</code>抓取使用者在 html 輸入的內容（例如表單的 input），一律是<strong>字串</strong>型態，如果需要資料是數字型態、需要做數值運算的話，需要資料轉型</li>
</ol>
</li>
<li>作業心得：在做訂購數量的 input 時，學到了可以用<code>max=&quot;&quot;</code>、<code>min=&quot;&quot;</code>設最大最小值，甚至 type 是日期的也可以設定<blockquote>
<p>作業說明：抓取使用者填入的訂購數量，將資料轉型為數字後計算價錢，顯示於下面的表單<br><a href="https://jsfiddle.net/iamCJ/r3ogam4j/">https://jsfiddle.net/iamCJ/r3ogam4j/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第七課－認識巢狀結構"><a href="#第七課－認識巢狀結構" class="headerlink" title="第七課－認識巢狀結構"></a>第七課－認識巢狀結構</h2><ul>
<li>課程概要：<ol>
<li>了解<strong>數字</strong>資料型態的比較：大於<code>&gt;</code>、小於<code>&lt;</code>、大於等於<code>&gt;=</code>、小於等於<code>&lt;=</code>、不等於<code>!=</code></li>
<li>認識<code>else if</code>：<ol>
<li>當<code>if</code>條件不成立時，會往下到<code>else if</code>條件判斷，如果仍不成立，才會到 else</li>
<li><code>else if</code>可以有多個，當前面的<code>else if</code>條件不成立時，才會接著往下一個<code>else if</code>判斷</li>
</ol>
</li>
<li>巢狀結構是什麼？<br>就是<code>if</code>裡面又包了一層<code>if</code>，可以再繼續包下去，不過不建議，程式會變得不易閱讀，可以在條件的部分多琢磨一點，例如使用 and<code>&amp;&amp;</code>、or<code>||</code>將條件串起來<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//巢狀結構</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a大於b，且大於100&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a大於b，且小於等於100&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a小於等於b，但大於100&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a小於等於b，且小於等於100&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用 &amp;&amp; 修改條件</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a大於b，且大於100&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b &amp;&amp; a &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a大於b，且小於等於100&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt;= b &amp;&amp; a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a小於等於b，但大於100&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a小於等於b，且小於等於100&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：忘記<code>else if</code>的 else 跟 if 要分開，難怪 JSFiddle 一直報錯 XD<blockquote>
<p>作業說明：透過<code>if</code>、<code>else if</code>及<code>else</code>判斷使用者填寫表單的狀況，並依需要跳出 alert 提示<br><a href="https://jsfiddle.net/iamCJ/hrc9pv3g/">https://jsfiddle.net/iamCJ/hrc9pv3g/</a></p>
</blockquote>
</li>
</ul>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>因為我本來就有些 JS 的基礎，所以這個系列的概念以及實作對我來說沒什麼問題，只是在要寫的功能越來越多時，對於切分功能、整理程式碼會有些苦惱，還有把樣式整理成能看的樣子花了好多時間 XD</p>
<h1 id="文章連結"><a href="#文章連結" class="headerlink" title="文章連結"></a>文章連結</h1><p><a href="https://codelove.tw/@howtomakeaturn/course/l3j5xk">自學網頁の嬰兒教材：JavaScript（一）—— 幫衣服工廠做個好用表單</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>用嬰兒都學得會的教材學JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【用嬰兒都學得會的教材學JS】學習筆記－系列（三）</title>
    <url>/%E3%80%90%E7%94%A8%E5%AC%B0%E5%85%92%E9%83%BD%E5%AD%B8%E5%BE%97%E6%9C%83%E7%9A%84%E6%95%99%E6%9D%90%E5%AD%B8JS%E3%80%91%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>站長大大希望我們能夠有自學的能力，面對問題可以自己尋找方法、解答，因此這一個系列的課只會給予簡介以及關鍵字，其餘的資訊需要自行去搜尋、參考並思考如何做才能符合作業要求。<br>不過老實說，這樣的學習方式我已經很習慣了 ∠( ᐛ 」∠)＿當我發現職訓所教的不夠深、不夠清楚時，或是在我自己製作專案碰到問題，經過思考也找不到解決方法時，就會搜尋關鍵字去找答案，這時就會很感謝自己生在科技發達的時代 XD，網路上可以找到很多前人分享的文章、我遇過的問題也會有人遇到，並且在 Stack Overflow 提問，不怕找不到解方，只怕關鍵字下得不夠清楚。</p>
<h1 id="課程開始"><a href="#課程開始" class="headerlink" title="課程開始"></a>課程開始</h1><h2 id="第一課－alert-示警元件"><a href="#第一課－alert-示警元件" class="headerlink" title="第一課－alert 示警元件"></a>第一課－alert 示警元件</h2><ul>
<li>課程概要：<ol>
<li>認識什麼是 alert 元件：出現此元件的狀況通常是用來公告訊息，或是在使用者做某些動作後的通知、提示</li>
<li>關鍵字：<strong>alert ui</strong>、<strong>alert component</strong></li>
</ol>
</li>
<li>作業心得：本來以為這系列的重點仍會放在 JS 的功能或語法等，但這堂課看起來比較偏向設計常見樣式，功能僅佔一點<blockquote>
<p>作業說明：參考他人設計，自行製作出 alert 元件，依照使用情境對應不同顏色，並且加入可以關閉元件的按鈕<br><a href="https://jsfiddle.net/iamCJ/1pbxksv6/">https://jsfiddle.net/iamCJ/1pbxksv6/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第二課－toast-吐司元件"><a href="#第二課－toast-吐司元件" class="headerlink" title="第二課－toast 吐司元件"></a>第二課－toast 吐司元件</h2><ul>
<li>課程概要：<ol>
<li>認識什麼是 toast 元件：可以想像成烤好的吐司會從烤土司機<strong>彈跳</strong>出來一樣，當使用者做某些動作後會跳出<strong>提示文字框</strong>給予反饋，這個元件通常會做成「顯示幾秒之後自動關閉」</li>
<li>認識<code>setTimeout()</code>函式：這個函式的功能是在設定的延遲秒數到了後，執行<strong>一次</strong>括號內程式<figure class="highlight js"><figcaption><span>用法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入要延遲執行的function</span></span><br><span class="line"><span class="built_in">setTimeout</span>(functionName, 秒數（毫秒）, 參數<span class="number">1</span>, 參數<span class="number">2.</span>..);</span><br><span class="line"><span class="comment">//或裡面塞立即函式</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
<li>關鍵字：<strong>toast ui</strong>、<strong>toast component</strong></li>
</ol>
</li>
<li>作業心得：其實經過查詢之後，覺得 alert 跟 toast 的設計長得差不多 XD，只是在顯示方面有所差異而已<blockquote>
<p>作業說明：在點擊按鈕以後，要彈出對應的 toast 元件，並且使用<code>setTimeout</code>設定元件於 5 秒後消失<br><a href="https://jsfiddle.net/iamCJ/pe0y7uoq/">https://jsfiddle.net/iamCJ/pe0y7uoq/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第三課－modal-互動視窗元件"><a href="#第三課－modal-互動視窗元件" class="headerlink" title="第三課－modal 互動視窗元件"></a>第三課－modal 互動視窗元件</h2><ul>
<li>課程概要：<ol>
<li>認識什麼是 modal 元件：中文是互動視窗，也有人稱為燈箱或視窗，會在瀏覽網頁時跳出會遮擋內容的視窗，有時會是登入的提示，也有時會顯示廣告；也有時會用來在同一個頁面顯示額外資訊，不需跳轉至別的網址，像是點擊商品圖片後，會跳出詳細介紹、產品規格等資訊的視窗</li>
<li>關鍵字：<strong>popup modal ui</strong>、<strong>lightbox ui</strong>、<strong>燈箱 css</strong>、<strong>popup modal css</strong></li>
<li>補充：modal 元件跳出時，通常會讓背景變成半透明黑色、白色，而這種半透明背景遮罩的英文術語叫 black overlay，可以搜尋 <strong>full page black overlay css</strong> 了解如何使用 CSS 實現這樣的效果</li>
</ol>
</li>
<li>作業心得：寫這份作業的時間主要仍是花在寫 CSS，樣式沒問題，用 JS 寫功能就簡單了(&#96;･∀･)b<blockquote>
<p>作業說明：在點擊按鈕以後，要彈出對應的 modal 元件，並且加入可以關閉元件的按鈕。（我自己額外做了點擊背景遮罩也能關閉視窗的功能）<br><a href="https://jsfiddle.net/iamCJ/1q9unksL/">https://jsfiddle.net/iamCJ/1q9unksL/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第四課－表單驗證"><a href="#第四課－表單驗證" class="headerlink" title="第四課－表單驗證"></a>第四課－表單驗證</h2><ul>
<li>課程概要：<ol>
<li>不使用 alert 跳出表單驗證提示：alert 的樣式不夠漂亮，可以參考業界是如何設計欄位驗證的樣式</li>
<li>關鍵字：<strong>form validation ui</strong></li>
<li>補充：作業的設計會用到有關驗證<strong>有無某字</strong>以及<strong>字串長度</strong>的功能，可以搜尋關鍵字<strong>javascript 包含字串</strong><code>.includes()</code>、<strong>javascript 字串長度</strong><code>.length</code>找方法</li>
</ol>
</li>
<li>作業心得：在寫的過程中基本上沒有遇到什麼困難，只有中途 JSFiddle 的預覽一直跳 404，慢慢除錯發現是 button 的問題，經查詢原來是因為沒有設 type 屬性，加上以後預覽就順利運行了<blockquote>
<p>作業說明：做一個註冊表單，每個表格需要有驗證機制，當 input 的輸入不符合條件時，要跳出文字提示使用者<br><a href="https://jsfiddle.net/iamCJ/m1j0gb9c/">https://jsfiddle.net/iamCJ/m1j0gb9c/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第五課－collapse-折疊效果"><a href="#第五課－collapse-折疊效果" class="headerlink" title="第五課－collapse 折疊效果"></a>第五課－collapse 折疊效果</h2><ul>
<li>課程概要：<ol>
<li>認識 collapse 效果：是指可以將內容收折、展開的效果</li>
<li>關鍵字：<strong>collapse item css</strong></li>
<li>補充：收折、展開的動畫通常會是<strong>淡入淡出</strong>、<strong>滑上滑下</strong>，可以搜尋關鍵字<code>slide down css</code>、<code>slide up css</code>、<code>fade in css</code>、<code>fade out css</code>參考如何寫出這樣的效果</li>
</ol>
</li>
<li>作業心得：中間一度卡在 CSS 的<code>transition</code>沒有動畫效果出現，後來把內容的<code>display:none</code>改掉，改成調整<code>height</code>的數值，以及設<code>overflow:hidden</code>把溢出的內容隱藏，動畫就能正常顯示了<blockquote>
<p>作業說明：做一個問與答的頁面，一開始不顯示回答的內容，需要點擊問題才會顯示，並且再次點擊可以收起回答<br><a href="https://jsfiddle.net/iamCJ/f8tavnxr/">https://jsfiddle.net/iamCJ/f8tavnxr/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第六課－dropdown-下拉式選單"><a href="#第六課－dropdown-下拉式選單" class="headerlink" title="第六課－dropdown 下拉式選單"></a>第六課－dropdown 下拉式選單</h2><ul>
<li>課程概要：<ol>
<li>認識 dropdown 元件：中文是下拉式選單，通常會運用在有多個階層的導覽列</li>
<li>關鍵字：<strong>dropdown menu javascript</strong></li>
</ol>
</li>
<li>作業心得：嗯 ⋯ 果然比起寫 CSS，寫 JS 更能讓我感到愉悅啊 XD<blockquote>
<p>作業說明：做一個導覽列，點擊最後一個選項可以顯示下拉式選單，並且再次點擊可以收起<br><a href="https://jsfiddle.net/iamCJ/cLgj104q/">https://jsfiddle.net/iamCJ/cLgj104q/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第七課－carousel-輪播元件"><a href="#第七課－carousel-輪播元件" class="headerlink" title="第七課－carousel 輪播元件"></a>第七課－carousel 輪播元件</h2><ul>
<li>課程概要：<ol>
<li>認識 carousel 元件：中文是輪播元件，也有人叫它<strong>幻燈片 slideshow</strong></li>
<li>關鍵字：<strong>slideshow js</strong>、<strong>carousel javascript</strong></li>
</ol>
</li>
<li>作業心得：這個練習在職訓課程有寫過，所以寫起來很快 ∠( ᐛ 」∠)＿<blockquote>
<p>作業說明：製作一個圖片輪播區塊，並且有兩個按鈕，按下可以切換顯示前一張或後一張圖片<br><a href="https://jsfiddle.net/iamCJ/Lqucoy24/">https://jsfiddle.net/iamCJ/Lqucoy24/</a></p>
</blockquote>
</li>
</ul>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>可能是因為我已經有一些基礎的關係，覺得這系列的課還是不夠有挑戰性，許多元件設計及功能都有見過和寫過，所以會感覺沒有學到新東西、感到有點失望 XD，想要趕快進入下一系列的課ヽ(#&#96;Д´)ﾉ！</p>
<h1 id="文章連結"><a href="#文章連結" class="headerlink" title="文章連結"></a>文章連結</h1><p><a href="https://codelove.tw/@howtomakeaturn/course/gqveaW">自學網頁の嬰兒教材：JavaScript（三）—— 自己做看看實務常用 UI 元件</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>用嬰兒都學得會的教材學JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【用嬰兒都學得會的教材學JS】學習筆記－系列（二）</title>
    <url>/%E3%80%90%E7%94%A8%E5%AC%B0%E5%85%92%E9%83%BD%E5%AD%B8%E5%BE%97%E6%9C%83%E7%9A%84%E6%95%99%E6%9D%90%E5%AD%B8JS%E3%80%91%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>今天沒有什麼想說的，只想告訴自己：快快學、繼續學，趕快找到工作！(๑•̀ㅂ•́)و✧</p>
<h1 id="課程開始"><a href="#課程開始" class="headerlink" title="課程開始"></a>課程開始</h1><h2 id="第一課－認識-DOM-樹、新增元素"><a href="#第一課－認識-DOM-樹、新增元素" class="headerlink" title="第一課－認識 DOM 樹、新增元素"></a>第一課－認識 DOM 樹、新增元素</h2><ul>
<li>課程概要：<ol>
<li>認識 DOM tree、子元素、父元素的概念</li>
<li>使用 JS 操作 DOM tree：<ol>
<li><code>.createElement()</code>：在括弧內填入元素名稱，例如：<code>p</code>、<code>h1</code>，就可以動態新增元素</li>
<li><code>.append()</code>：可以用此方法將某個元素變為自己的子元素<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> exampleDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">exampleDiv.<span class="title function_">append</span>(newElement);</span><br><span class="line"><span class="comment">//html結構會是這樣</span></span><br><span class="line"><span class="comment">//&lt;div&gt;</span></span><br><span class="line"><span class="comment">//  &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>使用<code>alert</code>、<code>console.log()</code>來除錯</li>
</ol>
</li>
<li>作業心得：這次依然是 CSS 比較花費時間 XD。<blockquote>
<p>作業說明：按下按鈕後，在下方表單新增使用者在 input 輸入的事項，會用到<code>.createElement()</code>及<code>.append()</code>。<br><a href="https://jsfiddle.net/iamCJ/j17Lq0om/">https://jsfiddle.net/iamCJ/j17Lq0om/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第二課－從-DOM-樹移除元素、動態加上-onclick-事件"><a href="#第二課－從-DOM-樹移除元素、動態加上-onclick-事件" class="headerlink" title="第二課－從 DOM 樹移除元素、動態加上 onclick 事件"></a>第二課－從 DOM 樹移除元素、動態加上 onclick 事件</h2><ul>
<li>課程概要：<ol>
<li>動態加入 onclick 事件：在 JS 內使用變數綁定事件，而非在 html tag 內加事件</li>
<li>使用<code>.children</code>、<code>.parentElement</code>可以列出元素的所有子元素及父元素，而所有子元素會以<strong>陣列</strong>型態列出</li>
<li>使用<code>.remove()</code>可以刪除該元素</li>
<li>了解<code>document</code>物件、<code>event</code>物件：前者是 JS 在瀏覽器內建的<strong>物件</strong>，代表網頁<strong>當下的狀態</strong>；後者也是<strong>物件</strong>，代表網頁<strong>當下正在發生的事件</strong>，使用<code>event.target</code>可以找到當前發生事件的元素</li>
</ol>
</li>
<li>作業心得：我覺得這次比較困擾我的部分是：想要把<strong>新增</strong>及<strong>刪除</strong>的功能切開，希望新增的 function 就放新增的東西，刪除的 function 也一樣，但由於刪除的按鈕需要在新增 function 的部分跟著<code>inputValue</code>一起長出來（只是我的想法而已），所以最後刪除的 function 裡就只放刪除的行為而已<blockquote>
<p>作業說明：在每一個事項旁新增刪除的按鈕，運用<code>event.target</code>找到被觸發的<code>button</code>元素，再使用<code>.parentElement</code>指定整個<code>&lt;li&gt;</code>及其子元素，並用<code>.remove()</code>將指定的整個結構刪除<br><a href="https://jsfiddle.net/iamCJ/y6fLjr9o/">https://jsfiddle.net/iamCJ/y6fLjr9o/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第三課－認識-for-迴圈"><a href="#第三課－認識-for-迴圈" class="headerlink" title="第三課－認識 for 迴圈"></a>第三課－認識 for 迴圈</h2><ul>
<li>課程概要：認識<code>for of</code>的寫法，這個方法會將<code>of</code>後面接的陣列內容依序一筆一筆跑程式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;bird&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;I am a &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> animal <span class="keyword">of</span> array1) &#123;</span><br><span class="line">  text += animal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br></pre></td></tr></table></figure></li>
<li>自己補充：我想要在 JS 新增的刪除按鈕加上 id，原本只知道加 class 的方式是<code>.classList.add()</code>，後來查到<code>.setAttribute()</code>這個方法，可以新增 id、class、style 等等</li>
<li>作業心得：一直卡在要怎麼取到 span 的值，偷偷看其他人的作業才發現，原來取到<code>list.children</code>之後，再用<code>.children[0]</code>指向第一個子元素的<code>&lt;span&gt;</code>就可以了<blockquote>
<p>作業說明：新增一個可以將所有事項 alert 出來的按鈕，使用<code>for of</code>並結合<code>.children.textContent</code>將每一筆事項列出<br><a href="https://jsfiddle.net/iamCJ/Ldbx2u4o/">https://jsfiddle.net/iamCJ/Ldbx2u4o/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第四課－讀取與修改-DOM-元素的-class"><a href="#第四課－讀取與修改-DOM-元素的-class" class="headerlink" title="第四課－讀取與修改 DOM 元素的 class"></a>第四課－讀取與修改 DOM 元素的 class</h2><ul>
<li>課程概要：<ol>
<li>動態在 DOM tree<strong>存取</strong>元素的 class：使用<code>.className</code>的屬性就能取到元素的 class</li>
<li>動態在 DOM tree<strong>修改</strong>元素的 class：直接修改<code>.className</code>屬性</li>
</ol>
</li>
<li>作業心得：不太喜歡重複的程式出現太多次，例如在 if 判斷裡，不同條件下要呈現的內容只有些微差異，卻要一直重複相似的程式碼，但目前想到的辦法就只能將重複會用到的設為變數，至少畫面看起來比較簡潔了一點<blockquote>
<p>作業說明：增加選單，依照不同選項給予所輸入的事項對應的 class，並且輸出到 alert 的內容也要依據不同選項而有所差異<br><a href="https://jsfiddle.net/iamCJ/5mok4eq1/">https://jsfiddle.net/iamCJ/5mok4eq1/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第五課－認識-onchange-事件"><a href="#第五課－認識-onchange-事件" class="headerlink" title="第五課－認識 onchange 事件"></a>第五課－認識 onchange 事件</h2><ul>
<li>課程概要：<br>認識<code>onchange</code>方法：被綁上這個方法的元素有變化就會觸發事件。不過不同的 html 元素對於觸發<code>onchange</code>的定義有點不同，取得<strong>變化後的新值</strong>的方式也會有不同</li>
<li>作業心得：今天的作業沒有問題，做得很順利(&#96;･∀･)b<blockquote>
<p>作業說明：使用<code>onchange</code>來偵測選單的變動，當使用者點選不同選項時，給予 input 樣式的變化<br><a href="https://jsfiddle.net/iamCJ/pLj9xsdr/">https://jsfiddle.net/iamCJ/pLj9xsdr/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第六課－讀取與修改-DOM-元素的-style"><a href="#第六課－讀取與修改-DOM-元素的-style" class="headerlink" title="第六課－讀取與修改 DOM 元素的 style"></a>第六課－讀取與修改 DOM 元素的 style</h2><ul>
<li>課程概要：修改<code>.style.display</code>屬性，讓元素顯示或消失</li>
<li>作業心得：<ol>
<li>這堂課的作業應該是想要我們運用<code>.style.display</code>去設計樣式的切換，但我想要的樣式若使用<code>display:none</code>的話會跑版，因此我選擇改用<code>visibility</code>去控制元素的顯示或消失</li>
<li>另外在寫完程式後，列出多個事項來測試才發現，我原本的寫法－<strong>先抓好要控制的元素，在符合條件時修改其 style</strong>，會變成不管勾選哪個事項，只有第一個事項會觸發，所以我後來改成用<code>event.target.parentElement.children[2]</code>去抓被觸發的<code>&lt;span&gt;</code>，就沒問題了</li>
</ol>
</li>
<li><font style="color:grey;">這行是為了排版好看 ∠( ᐛ 」∠)＿</font><blockquote>
<p>作業說明：使用<code>.style.display</code>屬性控制元素，在被勾選起來的事項旁顯示元素，沒有被勾選的則隱藏，我自己還加入了 class，將被勾起的事項文字加上刪除線（<code>text-decoration:line-through</code>）<br><a href="https://jsfiddle.net/iamCJ/mw581v70/">https://jsfiddle.net/iamCJ/mw581v70/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第七課－用-Selector-API-選取元素"><a href="#第七課－用-Selector-API-選取元素" class="headerlink" title="第七課－用 Selector API 選取元素"></a>第七課－用 Selector API 選取元素</h2><ul>
<li>課程概要：<ol>
<li>認識<code>.querySelector()</code>、<code>.querySelectorAll()</code><ol>
<li><code>.querySelector()</code>：於括號內填入要存取的元素名稱、id、或是 class，如果有多個符合的元素，<strong>只會回傳第一個</strong></li>
<li><code>.querySelectorAll()</code>：使用方式跟<code>.querySelector()</code>一樣，不同的是，如果有多個符合的元素，將<strong>以陣列形式全部列出</strong></li>
<li>兩者與<code>.getElementById()</code>的差別是：<code>.getElementById()</code>只能存取有設置<code>id</code>的元素，而<code>.querySelector()</code>及<code>.querySelectorAll()</code>可以直接存取 DOM 元素（可以當作是 html tag），並且可以用類似於 css 指定元素的方式設定要找的目標，例如：<code>document.querySelector(&#39;div ul li p&#39;)</code></li>
</ol>
</li>
<li>認識<code>.closest()</code>：於括號內填入要存取的元素名稱、id、或是 class，他會從目前位置往上層找，父層找不到就再往祖父層找，直到找到第一個符合的元素，但這個方法只能找祖先（？，與目前位置在同一層的元素不會回傳結果</li>
</ol>
</li>
<li>作業心得：相較於之前教的，我更喜歡用這一課用<code>.closest()</code>及<code>.querySelector()</code>的方法來找父元素、子元素，因為可以更明確指定，比較不會因為架構的順序調整與變動而影響，若像是使用索引的方式指定的話，如：<code>children[0]</code>，在換順序以後索引就需要跟著更換<blockquote>
<p>作業說明：作業進行重構程式碼，將<code>.getElementById()</code>、<code>.parentElement</code>、<code>.children</code>全部改為這一課教的語法<br><a href="https://jsfiddle.net/iamCJ/6k38qar4/">https://jsfiddle.net/iamCJ/6k38qar4/</a></p>
</blockquote>
</li>
</ul>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>我覺得這系列的課還在我有學過的範圍裡，只是有幾個語法沒有用過，或是更習慣使用另一種相似功能的語法，難度還不高，期待後面的課程可以更有挑戰性 ٩(｡・ω・｡)﻿و</p>
<p>原本預期兩～三天可以完成一個系列的課程，但沒想到實作起來還是挺花時間的，要再加把勁！趕快把接下來的課學完吧！</p>
<h1 id="文章連結"><a href="#文章連結" class="headerlink" title="文章連結"></a>文章連結</h1><p><a href="https://codelove.tw/@howtomakeaturn/course/vx8gqZ">自學網頁の嬰兒教材：JavaScript（二）—— 親手做個待辦事項小工具</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>用嬰兒都學得會的教材學JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【用嬰兒都學得會的教材學JS】學習筆記－系列（五）</title>
    <url>/%E3%80%90%E7%94%A8%E5%AC%B0%E5%85%92%E9%83%BD%E5%AD%B8%E5%BE%97%E6%9C%83%E7%9A%84%E6%95%99%E6%9D%90%E5%AD%B8JS%E3%80%91%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>結束系列四馬上就來學系列五啦！目前上到全系列過半，大概耗時半個月，感覺如果我卯起全力來學，應該可以一個月內就完結這系列哦(╯✧∇✧)╯，不過前提是我要先打敗我的惰性 ∠( ᐛ 」∠)＿</p>
<h1 id="課程開始"><a href="#課程開始" class="headerlink" title="課程開始"></a>課程開始</h1><h2 id="第一課－學會-Cookie-相關功能"><a href="#第一課－學會-Cookie-相關功能" class="headerlink" title="第一課－學會 Cookie 相關功能"></a>第一課－學會 Cookie 相關功能</h2><ul>
<li>課程概要：<ol>
<li>認識 HTTP 協定：HTTP 是一種網路通訊協定，主要用來傳輸網頁相關的內容（HTML、圖片、影片 ⋯ 等）的檔案，在 HTTP 的世界中是沒有狀態可言的，每次連線請求都是獨立發生、新的開始。<br><font style="color:grey;">本段內容摘錄自：<a href="https://kaibaoom.tw/2019/10/09/cookies-introduction/">透過購物車來了解 Cookie 的運作方式</a></font></li>
<li>認識 cookie：相較於無狀態的 HTTP 協議，cookie <strong>可以記錄網頁的狀態</strong>，比如說已登入或是放進購物車裡的商品，並且 cookie 的資料前後端都可以做修改，會附屬在 HTTP 的連線請求上。</li>
<li>cookie 的特性：<ol>
<li>其內容在後台主機端也能存取</li>
<li>其內容在重新整理網頁之後仍會保留</li>
</ol>
</li>
<li>將值存取於 cookie 的寫法：將值賦予到<code>document.cookie</code>這個物件屬性，值的格式是<code>&#39;name=&#39; + value</code>，而這個程式的設計即便賦予<code>document.cookie</code>兩次值（name 不同的狀況下），但第二次的值不會覆蓋第一個值，而是兩個都存進 cookie 裡</li>
<li>js-cookie 套件的使用方法：寫 cookie 也有方便的套件可以使用！<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//讀取cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">//讀取指定的cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(); <span class="comment">//讀取所有可見的cookie</span></span><br><span class="line"><span class="comment">//刪除cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：由於原本做作業的平台不支援 cookie 存取，因此要到另一個網站，但是我超不喜歡到處辦帳號的感覺，而且這個網站讓我體驗超差，一直出現像是預覽跑不出來、連線逾時、連線錯誤之類的問題，寫到不開心(#&#96;Д´)ﾉ<blockquote>
<p>作業說明：網頁的一開始會有提示頁，上面會有兩個按鈕，其中一個按鈕將使用者的狀態存入 cookie，使重整網頁後也不會再跳出提示頁，而另一個按鈕會導往 Google 首頁<br>p.s.看後面的課程不需要再用到 Replit 這個網站，因此我將程式碼移至 JSFiddle，但就不支援 cookie 存取了<br><a href="https://jsfiddle.net/iamCJ/f04esaxo/">https://jsfiddle.net/iamCJ/f04esaxo/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第二課－學會-Local-Storage-相關功能"><a href="#第二課－學會-Local-Storage-相關功能" class="headerlink" title="第二課－學會 Local Storage 相關功能"></a>第二課－學會 Local Storage 相關功能</h2><ul>
<li>課程概要：<ol>
<li>認識 Local Storage：能夠把資料儲存在瀏覽器上的功能</li>
<li>Local Storage 與 cookie 的差別：<ol>
<li>local storage 的資料不會挾帶在 http request 中發送，也就是伺服器端<strong>無法</strong>直接存取</li>
<li>local storage 能儲存的資料大小，比 cookie <strong>大</strong>很多</li>
</ol>
</li>
<li>將值存取於 Local Storage 的寫法：<ol>
<li>儲存資料：使用 <code>localStorage.setItem(&quot;name&quot;,&quot;value&quot;)</code></li>
<li>取得資料：使用 <code>localStorage.getItem(&quot;name&quot;)</code></li>
<li>如果資料的型態非字串，需要使用<code>JSON.stringify</code>將物件轉換成字串，使用 <code>JSON.parse</code>將字串轉換成物件</li>
</ol>
</li>
<li>自己補充：當要存多筆資料時，可以先用<code>array.push()</code>將每筆資料新增在一個陣列中，最後再一次<code>localStorage.setItem(&quot;name&quot;,JSON.stringify(array))</code>把整筆資料存進去</li>
</ol>
</li>
<li>作業心得：新增一開始沒規劃的功能還滿麻煩的，需要調整資料結構，而且很容易出現意外的錯誤 OAO<blockquote>
<p>作業說明：將系列（二）的作業新增<strong>儲存</strong>按鈕，將清單存入 local storage，在網頁重整後仍能呈現原本的清單內容<br><a href="https://jsfiddle.net/iamCJ/wmnzq15a/">https://jsfiddle.net/iamCJ/wmnzq15a/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第三課－變數作用域、箭頭函式、ES6-語法"><a href="#第三課－變數作用域、箭頭函式、ES6-語法" class="headerlink" title="第三課－變數作用域、箭頭函式、ES6 語法"></a>第三課－變數作用域、箭頭函式、ES6 語法</h2><ul>
<li>課程概要：<br><font style="color:grey;">剛好之前有寫過關於作用域及宣告方式的筆記，因此以下內容會是由我個人筆記結合課程而產出的</font><ol>
<li>認識變數作用域：意指變數及被賦予的值有效或者是成立的範圍。JS 的作用域可以分為兩種：<strong>全域</strong>作用域(global)、<strong>區域</strong>作用域(local)，而區域作用域又可以細分為<strong>函式</strong>作用域(function)及<strong>區塊</strong>作用域(block)，依據不同的宣告方式，變數及被賦予的值其有效的範圍也不同</li>
<li>var、let、const 的差別：<ul>
<li>var：在 ES6 之前，JS 中的變數作用域只有全域跟函式兩種，並且在使用<code>var</code>時，要留意一種名為 <strong>Hoisting</strong> 的現象，這是一種會讓人搞錯變數作用域的現象。而 var 有效作用域是函式(function)作用域，如果沒有用函式包住的話，被 var 宣告的值會是全域變數</li>
<li>const、let：在 ES6 之後，新增 const 與 let 兩種宣告方式，有效的作用域類型為區塊(block)作用域，範圍在大括號<code>&#123;&#125;</code>之內；而 const 與 let 的差異則是，const 是宣告不會變的參數，let 則是可能會重新被指定的參數。<table>
<thead>
<tr>
<th>名稱</th>
<th>重複宣告</th>
<th>先使用，後宣告</th>
<th>有效作用域</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>O</td>
<td>O</td>
<td>函式(function)作用域</td>
</tr>
<tr>
<td>let</td>
<td>O</td>
<td>X</td>
<td>區域(block)作用域</td>
</tr>
<tr>
<td>const</td>
<td>X</td>
<td>X</td>
<td>區域(block)作用域</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li>什麼是 hoisting（提升）？：javascript 的特性之一，會讓<code>var</code><strong>宣告</strong>這個動作<strong>提升到函式最頂端</strong>的位置執行，但是「被賦予的值」<strong>不會</strong>跟著被提升！另外函式也具備 hoisting 這個特性，因此在兩個函式需要互相呼叫的狀況下，是可以執行並且合法的</li>
<li>認識箭頭函式：基本上就長<code>()=&gt;&#123;&#125;</code>這個樣子，而跟一般函式最主要的差別是，箭頭函式中的 this，會依據函式在哪裡建立而決定，而非與一般函式一樣，依照執行時被呼叫的地方決定。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrow1</span> = (<span class="params">param1, param2</span>) =&gt; &#123; ... &#125;</span><br><span class="line"><span class="comment">// 僅有一個參數時，可省略括號</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrow2</span> = params =&gt; &#123; ... &#125;</span><br><span class="line"><span class="comment">// 單一運算後直接回傳時，可省略大括號</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrow3</span> = params =&gt; params ** <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：這課內容突然變好多，光寫下筆記就花了一些時間，但還好之前就學過這些概念，理解起來不難<blockquote>
<p>作業說明：寫一個計數器及一個四則運算的計算器，思考宣告變數的位置會如何影響結果並完成作業要求<br><a href="https://jsfiddle.net/iamCJ/cny8rk7w/">https://jsfiddle.net/iamCJ/cny8rk7w/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第四課－學會-AJAX-基本原理"><a href="#第四課－學會-AJAX-基本原理" class="headerlink" title="第四課－學會 AJAX 基本原理"></a>第四課－學會 AJAX 基本原理</h2><ul>
<li>課程概要：<ol>
<li>認識 AJAX：全名是 Asynchronous JavaScript and XML，簡而言之就是「<strong>非同步</strong>從主機取得資料來更新網頁內容」的意思。<br>舊式的網頁都是瀏覽器向主機發送 HTTP 請求 ⇒ 主機回應一整包 html 內容，因為是一次拿到一整包 html 內容，所以說「網頁上全部內容都是同步取得」。<br>而 AJAX 的技術，則是先載入基本網頁內容，再接著根據需求，於<strong>不同時間點</strong>發送 HTTP 請求取得<strong>部份內容</strong>，所以叫做非同步。</li>
<li>AJAX 的寫法： 使用<code>.fetch()</code>，括號內參數放入要呼叫的 API 網址，接著使用 <code>.then()</code>把 <code>fetch()</code> 回傳的東西，直接當成物件接著呼叫，然後再次使用<code>.then()</code>再把結果當成物件再呼叫一次<br><code>fetch()</code> 回傳的東西代表的是一個 HTTP 回應物件，這個回應物件的 HTTP body 是實際的 JSON 內容，可以用<code>.json()</code>函式取得內容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://fakestoreapi.com/users/1&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：大家把作業弄得好漂亮哦，但我今天有點偏懶，先把功能做出來就好 ∠( ᐛ 」∠)＿<blockquote>
<p>作業說明：使用 AJAX 取得商品資料，將所有商品名稱列出，並新增按下會跳出該商品 id、分類、說明的按鈕<br><a href="https://jsfiddle.net/iamCJ/xehb2nt4/">https://jsfiddle.net/iamCJ/xehb2nt4/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第五課－學會-AJAX-錯誤處理"><a href="#第五課－學會-AJAX-錯誤處理" class="headerlink" title="第五課－學會 AJAX 錯誤處理"></a>第五課－學會 AJAX 錯誤處理</h2><ul>
<li>課程概要：<ol>
<li>認識 AJAX 可能發生的各種錯誤：在 AJAX 請求資料時，可能會發生各種狀況，像是：主機故障或者過度忙碌無法回應、呼叫 API 時登入驗證資訊過期、API 有限制額度，用戶額度使用完了被主機拒絕、用戶在發送 AJAX 時網路斷線了</li>
<li>認識 AJAX 錯誤處理的寫法：可以使用<code>.catch()</code>函式，在括號裡面寫當發生錯誤狀況時，要出現的訊息或處理方式，比如 alert 告知使用者剛剛的請求發生錯誤，請重新整理再試一次</li>
</ol>
</li>
<li>作業心得：這篇內容好短好開心 ∠( ᐛ 」∠)＿<blockquote>
<p>作業說明：將上一堂課的作業加上 AJAX 的錯誤處理機制<br><a href="https://jsfiddle.net/iamCJ/bj6fLec0/">https://jsfiddle.net/iamCJ/bj6fLec0/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第六課－學會-AJAX-與各種-HTTP-請求方法"><a href="#第六課－學會-AJAX-與各種-HTTP-請求方法" class="headerlink" title="第六課－學會 AJAX 與各種 HTTP 請求方法"></a>第六課－學會 AJAX 與各種 HTTP 請求方法</h2><ul>
<li>課程概要：<ol>
<li>認識 AJAX 與不同的 HTTP 請求方法：HTTP 協定中，HTTP Request 有多種不同的方法，基本上寫法都大同小異，在<code>.fetch()</code>加入第二個物件類型的參數，新增<code>method:</code>屬性註明要使用的請求方法，另外再新增代表 HTTP body 的<code>body:</code>屬性放入你想要新增或修改的資料即可，但由於資料需要是字串格式，因此在<code>body:</code>後須用<code>JSON.stringify</code>將物件轉為字串<ol>
<li>使用 HTTP GET 讀取資料<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://fakestoreapi.com/users&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span><br></pre></td></tr></table></figure></li>
<li>使用 HTTP POST 新增資料<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://fakestoreapi.com/users&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;apple@gmail.com&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span><br></pre></td></tr></table></figure></li>
<li>使用 HTTP PUT 更新資料<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定修改ID為4的用戶資料</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://fakestoreapi.com/users/4&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;banana@gmail.com&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span><br></pre></td></tr></table></figure></li>
<li>使用 HTTP DELETE 刪除資料<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定刪除ID為8的用戶資料</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://fakestoreapi.com/users/8&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>補充：上面的範例，用戶參數都是在網址最後加上<code>/&#123;ID&#125;</code>這種格式帶入，實務上，GET 參數也可能用<code>?id=&#123;ID&#125;</code>這種格式，而 POST 或其他類型的請求中，用戶參數也可能直接加在 <code>body: JSON.stringify(&#123;&#125;)</code> 裡面的屬性之中</li>
</ol>
</li>
<li>作業心得：在寫的時候不知道腦袋哪裡卡住，想用事件傳被點擊目標的 id 參數，怎麼用都會出錯，後來把事件寫在跟 fetch 同一個 function 就可以直接用 id 參數，不用傳&#x3D; &#x3D;<blockquote>
<p>作業說明：將上一堂課作業裡的每一項商品旁邊加上刪除按鈕，點擊按鈕後要將 API 的資料刪除，並且畫面的項目也要一起被刪除<br><a href="https://jsfiddle.net/iamCJ/x5n0cwhq/">https://jsfiddle.net/iamCJ/x5n0cwhq/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第七課－學會-AJAX-與-data-attribute-的結合"><a href="#第七課－學會-AJAX-與-data-attribute-的結合" class="headerlink" title="第七課－學會 AJAX 與 data attribute 的結合"></a>第七課－學會 AJAX 與 data attribute 的結合</h2><ul>
<li>課程概要：<ol>
<li>認識 data attribute：可以自訂屬性，存放資料、參數</li>
<li>data attribute 的寫法：html 的部分，直接在 tag 裡設定 <code>data-*</code> 屬性，米字號<code>*</code>可以隨意命名，寫 js 的部分，直接存取 DOM 元素的 <code>dataset</code> 屬性<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-example</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">dataset</span>.<span class="property">example</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：modal 的部分我偷懶拿之前作業的樣式 ∠( ᐛ 」∠)＿，其他部分寫得很開心～<blockquote>
<p>作業說明：把需要使用的資料用 data 屬性存起來，在需要使用時存取 dataset 即可，並將上一堂作業 alert 的部分，改成以 modal 元件呈現<br><a href="https://jsfiddle.net/iamCJ/okL98ndr/">https://jsfiddle.net/iamCJ/okL98ndr/</a></p>
</blockquote>
</li>
</ul>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這系列有些課的內容暴增，讓我比前幾個系列花更多時間在做整理 _(´ཀ`」 ∠)_ ，不過也令我更加深了 AJAX 的概念跟使用方法，以前都有點一知半解，學到怎麼做就跟著做，現在我就更清楚我是為了什麼而打這段程式 (&#96;･∀･)b</p>
<h1 id="文章連結"><a href="#文章連結" class="headerlink" title="文章連結"></a>文章連結</h1><p><a href="https://codelove.tw/@howtomakeaturn/course/Zq4v3w">自學網頁の嬰兒教材：JavaScript（五）—— 打造功能豐富的前端應用程式</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>用嬰兒都學得會的教材學JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【用嬰兒都學得會的教材學JS】學習筆記－系列（四）</title>
    <url>/%E3%80%90%E7%94%A8%E5%AC%B0%E5%85%92%E9%83%BD%E5%AD%B8%E5%BE%97%E6%9C%83%E7%9A%84%E6%95%99%E6%9D%90%E5%AD%B8JS%E3%80%91%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%8D%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>這一系列是要認識多個開源套件，我還滿期待的！之前做作品時，功能及樣式全都是靠著自己手刻，寫到心很累 XD，自己也不曾去探索其他套件，不知道有什麼好用的套件，藉著這堂課可以多見識一下，以後有需要就能運用、節省時間。</p>
<h1 id="課程開始"><a href="#課程開始" class="headerlink" title="課程開始"></a>課程開始</h1><h2 id="第一課－autosize-套件"><a href="#第一課－autosize-套件" class="headerlink" title="第一課－autosize 套件"></a>第一課－autosize 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 autosize 套件：這是一個自動調整<code>textarea</code>大小的套件，當使用者輸入的內容超過<code>textarea</code>預設大小，有這個套件就能自動放大，並且不會出現捲軸影響美觀。使用方式也很簡單，把要套用的 DOM 元素找到，傳入名為<code>autosize()</code>的函式中當參數即可<figure class="highlight js"><figcaption><span>範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title function_">autosize</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;textarea&quot;</span>));</span><br></pre></td></tr></table></figure></li>
<li>什麼是 API？：是 Application Programming Interface 的縮寫，中文是應用程式介面，可以理解成程式的<strong>使用方法</strong>或是<strong>產品規格</strong></li>
<li>搜尋第三方套件的建議：<ol>
<li>專案的星星數量：幾百顆以上的星星數較可靠，如果專案較冷門，可能代表其不夠成熟、文件不完整、潛在 bug 較多等等，使用上有風險</li>
<li>注意專案最近更新日期：last commit 的時間至少在兩年內比較適合使用，若太久沒有更新可能有點過時，會跟最新的瀏覽器或其他工具有衝突</li>
</ol>
</li>
<li>在專案使用第三方套件的方法：<ol>
<li>下載後使用<code>&lt;script&gt;</code>引入</li>
<li>搜尋關鍵字<strong>套件名稱 CDN</strong>，使用現成的<code>&lt;script&gt;</code>，不過要注意的是，這個載入方式可能影響網站的載入速度</li>
</ol>
</li>
<li>什麼是 CDN？：是 Content Distribution Network 的縮寫，中文是內容傳遞網路，原理有些難懂，簡而言之就是可以用於加快網頁的載入速度</li>
</ol>
</li>
<li>作業心得：跟之前純手刻所有樣式相比，可以簡單導入第三方套件，而且順利執行的感覺還真新奇(╯✧∇✧)╯<blockquote>
<p>作業說明：製作留言板，其中一個表格需要是<code>textarea</code>，並且成功使用 autosize 套件，在輸入超過預設行數時，能自動調整大小而非出現捲軸<br><a href="https://jsfiddle.net/iamCJ/oycx63uL/">https://jsfiddle.net/iamCJ/oycx63uL/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第二課－vanilla-lazyload-套件"><a href="#第二課－vanilla-lazyload-套件" class="headerlink" title="第二課－vanilla-lazyload 套件"></a>第二課－vanilla-lazyload 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 vanilla-lazyload 套件：使用這個套件可以讓網站的<strong>圖片延遲載入</strong>，當圖片元素出現在畫面上時才會進行載入，這樣比較不會因為網頁要一次載入多張圖片而導致頁面讀取速度慢</li>
<li>vanilla-lazyload 使用方式：<br>html 的部分，用<strong>img tag</strong>，套用名為<strong>lazy 的 class</strong>，並且設<strong>data-src</strong>屬性放圖片位址（因為放在<code>src</code>就會直接載入圖片了）<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;A lazy image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;lazy.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
js 的部分，需要 new 一個 <code>LazyLoad(&#123;&#125;)</code>，大括號<code>&#123;&#125;</code>內可以放入設定值，如要使用預設，大括號內空白即可<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lazyLoadInstance = <span class="keyword">new</span> <span class="title class_">LazyLoad</span>(&#123;</span><br><span class="line">  <span class="comment">// Your custom settings go here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>自己補充：其實這個套件不只可以使用在延遲圖片的載入，還可以用在影片跟動畫上，使用方法可以看官方文件(&#96;･∀･)b</li>
</ol>
</li>
<li>作業心得：覺得這個套件很方便，不需要自己去做圖片元素有沒有進入畫面的監聽，另外我瀏覽其他人作品的時候才發現，原來 JSFiddle 的側邊欄可以直接打關鍵字找 cdn 或是直接自己貼上 cdn 的<code>&lt;script&gt;</code>∠( ᐛ 」∠)＿<blockquote>
<p>作業說明：將 10 張圖片由上往下排序，並套用 lazyload 套件，讓圖片能夠延遲載入<br><a href="https://jsfiddle.net/iamCJ/a59x7b6h/">https://jsfiddle.net/iamCJ/a59x7b6h/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第三課－Chart-js-套件"><a href="#第三課－Chart-js-套件" class="headerlink" title="第三課－Chart.js 套件"></a>第三課－Chart.js 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 Chart.js 套件：可以<strong>畫圖表、報表</strong>的套件</li>
<li>Chart.js 使用方式：<br>html 的部分，用<strong>canvas tag</strong>，並且設定 id 以便在 js 存取這個元素<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;line-chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
js 的部分，需要 new 一個 <code>chart(element,&#123;&#125;)</code>，括號放抓取的<code>&lt;canvas&gt;</code>元素以及物件的大括號<code>&#123;&#125;</code>，大括號內放入各種設定值，由於可以設定的屬性很多，因此我直接在下方列出範例並使用註解的方式說明<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lineChart = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#line-chart&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(lineChart, &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>, <span class="comment">//圖表類型</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">labels</span>: [<span class="string">&quot;蛋糕&quot;</span>, <span class="string">&quot;麵包&quot;</span>, <span class="string">&quot;糖果&quot;</span>], <span class="comment">//類別</span></span><br><span class="line">    <span class="attr">datasets</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&quot; 售出數量&quot;</span>, <span class="comment">//單位或代表意義</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">80</span>, <span class="number">50</span>], <span class="comment">//對應上面類別的數量</span></span><br><span class="line">        <span class="attr">borderWidth</span>: <span class="number">1</span>, <span class="comment">//外框寬度設定</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>自己補充：除了以上的基礎設定，還有提供很多可以調整的設定及樣式，可以從官方文件查詢有什麼樣的屬性、參數以及使用方法</li>
</ol>
</li>
<li>作業心得：這個套件真的好方便！基本上只要處理好資料，它就會自動幫你產出又清楚又漂亮的圖表。另外想說這堂課站長大大沒有先教我們使用方法，雖然需要花時間去了解官方文件，但靠自己研究如何執行或使用工具，當成功運行時就會得到很大的成就感，在嘗試各種樣式跟效果的過程也很有趣(&#96;･∀･)b<blockquote>
<p>作業說明：找適合的資料並使用 Chart.js 製作成三種指定圖表（長條圖、折線圖、圓餅圖）<br><a href="https://jsfiddle.net/iamCJ/s5ga7j9L/">https://jsfiddle.net/iamCJ/s5ga7j9L/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第四課－jQuery-套件"><a href="#第四課－jQuery-套件" class="headerlink" title="第四課－jQuery 套件"></a>第四課－jQuery 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 jQuery 套件：是一個歷史悠久的 javascript library，其簡化許多原生 js 的功能，在使用及撰寫上更為便利</li>
<li>jQuery 優點：<ol>
<li>jQuery 選擇器寫起來很短，可以降低開發的時間成本</li>
<li>jQuery 的 plugin（外掛）生態系存在已久，有許多厲害的 UI 元件會用到 jQuery</li>
<li>適合小專案或 side project，能快速開發少量功能</li>
</ol>
</li>
<li>jQuery 缺點：<ol>
<li>jQuery 套件的檔案不小，導入會影響到網頁載入速度以及使用者體驗，同時還會影響到搜尋引擎 SEO 排名</li>
<li>正是因為歷史悠久，而科技日新月異，許多功能原生 js 也能支援了，加上有 Vue、React 等框架的發展，使用 jQuery 的優勢與便利性已大不如前</li>
</ol>
</li>
</ol>
</li>
<li>作業心得：站長大大在課程的最後問了一個值得思考的問題，關於撰寫的便利性以及維持網頁效能的抉擇，我的想法是偏好寫的時候麻煩、冗長一些，但不使用大包的套件影響網頁載入，我在用 jQuery 選擇器以及樣式轉換的時候，確實有被它簡短又方便的寫法吸引到，但當我按下執行程式，看到預覽畫面等了大概 2 秒才載入完的時候，我就覺得體驗不是很好了 XD<blockquote>
<p>作業說明：本次要寫兩份作業，分別在沒有使用 jQuery 以及有使用的狀況下，改變元素的文字顏色，感受兩種寫法的差異<br>（一）不使用 jQuery：<a href="https://jsfiddle.net/iamCJ/vke7zhto/">https://jsfiddle.net/iamCJ/vke7zhto/</a><br>（二）使用 jQuery：<a href="https://jsfiddle.net/iamCJ/vgwy7Lz1/">https://jsfiddle.net/iamCJ/vgwy7Lz1/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第五課－xdan-x2F-datetimepicker-套件"><a href="#第五課－xdan-x2F-datetimepicker-套件" class="headerlink" title="第五課－xdan&#x2F;datetimepicker 套件"></a>第五課－xdan&#x2F;datetimepicker 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 xdan&#x2F;datetimepicker 套件：依賴於 jQuery 的外掛套件，它是一個經過美化的<strong>時間日期選擇器</strong></li>
<li>使用方式：在 html 部分新增一個<code>&lt;input&gt;</code>，type 設為 text，並且設 id 以便在 js 抓取該元素；在 js 的部分，使用選擇器選擇元素後，在後面加上<code>.datetimepicker(&#123; &#125;)</code>，大括號<code>&#123;&#125;</code>內可以放設定值<br><font style="color:grey;">提醒，由於是基於 jQuery 發展的套件，因此除了導入套件本身的 cdn 還要導入 jQuery</font><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;timepicker&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#timepicker&quot;</span>).<span class="title function_">datetimepicker</span>(&#123;</span><br><span class="line">  <span class="comment">//各種設定</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：一開始寫的時候看到我的日期選擇器大跑版，偷看其他人的才發現我少導入 css 的 cdn 啊 ⋯⋯<blockquote>
<p>作業說明：使用 datetimepicker 套件做出兩個可以出現選擇日期（不需要選擇時間）的表格<br><a href="https://jsfiddle.net/iamCJ/ecd604Lo/">https://jsfiddle.net/iamCJ/ecd604Lo/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第六課－kenwheeler-x2F-slick-套件"><a href="#第六課－kenwheeler-x2F-slick-套件" class="headerlink" title="第六課－kenwheeler&#x2F;slick 套件"></a>第六課－kenwheeler&#x2F;slick 套件</h2><ul>
<li>課程概要：<ol>
<li>認識 kenwheeler&#x2F;slick 套件：跟上一堂的 datetimepicker 套件一樣，也是依賴於 jQuery 的外掛套件，它是一個把<strong>輪播功能</strong>簡化又美觀的套件</li>
<li>使用方式：在 html 部分新增一個你想要做輪播功能的區塊<code>&lt;div&gt;</code>，並且設 id 或 class 以便在 js 抓取該元素；在 js 的部分，使用選擇器選擇元素後，在後面加上<code>.slick(&#123; &#125;)</code>，大括號<code>&#123;&#125;</code>內可以放設定值<br><font style="color:grey;">提醒，由於是基於 jQuery 發展的套件，因此除了導入套件本身的 cdn 還要導入 jQuery</font><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;your-class&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>your content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>your content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>your content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#your-class&quot;</span>).<span class="title function_">slick</span>(&#123;</span><br><span class="line">  <span class="comment">//各種設定</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：覺得這個套件是真心方便耶！很多功能都不用自己寫了，同時還照顧到手機使用者，操作輪播區塊的方式很直覺，以後有機會德的話，我會想在我的專案使用這個套件(╯✧∇✧)╯<blockquote>
<p>作業說明：讓 5 張照片可以輪播顯示<br><a href="https://jsfiddle.net/iamCJ/ystnz6kf/">https://jsfiddle.net/iamCJ/ystnz6kf/</a></p>
</blockquote>
</li>
</ul>
<h2 id="第七課－TinyMCE-套件"><a href="#第七課－TinyMCE-套件" class="headerlink" title="第七課－TinyMCE 套件"></a>第七課－TinyMCE 套件</h2><ul>
<li>課程概要：<ol>
<li>什麼是 WYSIWYG 編輯器：全名是 What you see is what you get，中文是所見即所得，根據維基百科的解釋「是一種系統，⋯，使用者介面支援使用者在建立文件的同時檢視與最終結果非常相似的東西。」，簡而言之就是<strong>使用者在編輯時所見的內容等同於送出後的顯示內容</strong>，這種編輯器常用在寫文章或是有留言功能的網站</li>
<li>認識 TinyMCE 套件：是 <strong>WYSIWYG 編輯器</strong>的套件，讓人在網頁加入所見即所得編輯器變得超簡單</li>
<li>使用方式：在 html 部分新增一個你想要做 WYSIWYG 編輯器功能的區塊<code>&lt;textarea&gt;</code>，並且設 id 或 class 以便在 js 抓取該元素；在 js 的部分，打上<code>tinymce.init(&#123; &#125;)</code>，大括號<code>&#123;&#125;</code>內用<code>selector</code>屬性指定元素就可以了，另外，在大括號裡還可以放其他設定值<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;fortinymce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">tinymce.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;#fortinymce&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>作業心得：認識這麼多方便的酷東西，我以後會不會變成懶人啊 ∠( ᐛ 」∠)＿<blockquote>
<p>作業說明：使用 TinyMCE 套件製作一個 WYSIWYG 編輯器的區塊，並有新增發布文章的按鈕<br><a href="https://jsfiddle.net/iamCJ/z9yvek02/">https://jsfiddle.net/iamCJ/z9yvek02/</a></p>
</blockquote>
</li>
</ul>
<h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這個系列的課接觸到很多神人設計的套件，一邊佩服他們的技術，一邊感謝他們的貢獻給其他開發者帶來很大的便利，也期待自己有一天也能獨立研發出方便好用又炫炮的套件，變成神人之一；同時也覺得這堂課很有趣，只要調整一些設定值就能很輕易達到自己想要的結果，有種自己很厲害的錯覺 XD<br>話說，學到這系列，我覺得寫文章比學習新東西還累 XD</p>
<h1 id="文章連結"><a href="#文章連結" class="headerlink" title="文章連結"></a>文章連結</h1><p><a href="https://codelove.tw/@howtomakeaturn/course/837eq0">自學網頁の嬰兒教材：JavaScript（四）—— 學會第三方套件的使用方法</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>用嬰兒都學得會的教材學JS</tag>
      </tags>
  </entry>
  <entry>
    <title>【跟著大大一起從頭學Vue】Re Vue重頭說起：基礎模組化之筆記－1</title>
    <url>/%E3%80%90%E8%B7%9F%E8%91%97%E5%A4%A7%E5%A4%A7%E4%B8%80%E8%B5%B7%E5%BE%9E%E9%A0%AD%E5%AD%B8Vue%E3%80%91Re%20Vue%E9%87%8D%E9%A0%AD%E8%AA%AA%E8%B5%B7%EF%BC%9A%E5%9F%BA%E7%A4%8E%E6%A8%A1%E7%B5%84%E5%8C%96%E4%B9%8B%E7%AD%86%E8%A8%98%EF%BC%8D1/</url>
    <content><![CDATA[<h1 id="前言小廢話"><a href="#前言小廢話" class="headerlink" title="前言小廢話"></a>前言小廢話</h1><p>最近在觀看 Alex 大的 ReVue 系列影片從頭學 Vue，但發現如果沒有做筆記的話，很快就會對學過的東西印象模糊，加上 Alex 大的教學影片都長達一兩小時，要重新找影片來回憶也是有點困難又耗費時間，因此決定要做學習筆記並上傳於此以便日後查詢，不過我還算是初學者，並且所記下來的都是我主觀覺得需要注意的點，如果內容有誤、用詞不精準，或是寫得很廢根本不需要紀錄的部分就麻煩各位看官多多見諒了(｡･ω･｡)ﾉ<br><font style="font-size:15px;color:grey;">p.s.因為我是看到第一季的最後一集才突然意識到要做筆記，因此第一篇會直接從 Day 9 開始，更之前的會找時間補，但什麼時候會補完就隨緣了 ∠( ᐛ 」∠)＿</font></p>
<h1 id="本篇主題：基礎模組化"><a href="#本篇主題：基礎模組化" class="headerlink" title="本篇主題：基礎模組化"></a>本篇主題：基礎模組化</h1><h2 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h2><ul>
<li><p>為什麼要模組化？<br>1. 為了重複使用<br>2. 為了分類管理，將多個功能切割後每份模組只有單一功能</p>
</li>
<li><p>component 內需要有 template<br>template 放 HTML 的架構，可用雙引號<code>&quot;</code>、單引號<code>&#39;</code>、反引號<code>`</code>包住內容（推薦用反引號<code>`</code>）</p>
</li>
<li><p>component 內的 data <strong>必須</strong>是 function<br>因為物件是實體，會有可能指向到同一個物件上 → 變成沒有獨立的資料<br>因此要透過 function return object 確保每個 component 有自己的資料</p>
<figure class="highlight js"><figcaption><span>範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;example-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;CJ Wu&quot;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Hello! My name is &#123;&#123; name &#125;&#125;&lt;/h1&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>props 是什麼？<br>是一個將父（外）層 data 分享到內層的屬性（可以想成內層跟父層<strong>借</strong>data）<br>建議使用資料的方式是單向的，當作是跟人<strong>借用</strong>的，<strong>不可以</strong>在 component 內亂改資料，如果需要修改資料要通知父層(例如使用 listening)</p>
</li>
<li><p>slot 是什麼？<br>可以把它理解成插槽的意思，內層挖好一個空格讓父層放，讓父層決定內層內容</p>
</li>
<li><p>在 HTML 某些 tag 內使用模組需注意<br>像是<code>&lt;ol&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;select&gt;</code>內部<strong>不能</strong>放自訂的 template tag，會出錯，他們內部已有規定好要放的 tag 了（<code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;option&gt;</code>）<br>⇒ 因此要改成放原本規定好的 tag，再加上<code>is</code>屬性</p>
<figure class="highlight html"><figcaption><span>範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;example-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>component 用駝峰式命名須注意的地方<br>component 有兩種命名方式：駝峰式 ＆ dash 連接式(kebab-case)<br><strong>但是</strong>，駝峰式在 HTML 上<strong>無法被辨識</strong>（不認大小寫）<br>⇒ 因此要自行改成 dash 連接式，例如：<code>&quot;helloComponent&quot; → &lt;hello-compoment&gt;</code><br><font style="font-size:15px;color:grey;">p.s. 在 Vue cli 就不會有這樣的問題了</font></p>
</li>
<li><p>$emit 是什麼？<br>將在<em>Vue.component 內的值</em>打到父層</p>
<figure class="highlight js"><figcaption><span>範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//此處在Component內的template</span></span><br><span class="line"><span class="attr">template</span>:<span class="string">`&lt;button @click = &quot;$emit(&#x27;functionname&#x27;,value)&quot;&gt;&lt;/button&gt;`</span></span><br><span class="line"><span class="comment">//此處在HTML的component tag上，用method來接收值，並視需要寫入或修改父層的data</span></span><br><span class="line">&lt;hello-component @functionname=<span class="string">&quot;method&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此段程式的意思是：當使用者點擊按鈕時，會觸發@click事件，傳遞值出去</span></span><br><span class="line"><span class="comment">//父層的部分用監聽該事件去接收傳出來的值，在new Vue內的methods寫function去處理收到的值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>內層借資料（要用到多筆時），要選 <strong>傳物件&#x2F;陣列</strong> 還是 <strong>分別傳資料</strong> ？<br>用物件傳一整包資料雖然方便，但無法確保原始資料屬性會不會被改動，這樣會違反上面提到的 ── 單向使用的原則<br>⇒ 因此建議選擇<strong>分別傳多筆資料</strong>的方式<br><font style="font-size:15px;color:grey;">但若選擇用傳物件的方式，就要特別注意別出現<code>物件.資料屬性=&quot;change&quot;</code>，這樣會無法確認是內層還是父層改的資料</font></p>
</li>
</ul>
<hr>
<p>順便補上之前聽到的筆記</p>
<ul>
<li>要怎麼判斷 computed&#x2F;methods&#x2F;watch 內分別放什麼？<ul>
<li>computed 主要管理 <strong>資料</strong>產<strong>資料</strong></li>
<li>methods 主要管理 <strong>行為</strong></li>
<li>watch 主要管理 <strong>資料</strong>產<strong>行為&#x2F;事件</strong></li>
</ul>
</li>
</ul>
<h1 id="影片連結"><a href="#影片連結" class="headerlink" title="影片連結"></a>影片連結</h1><blockquote>
<p><a href="https://www.youtube.com/live/KQRfZ07bfAQ?feature=share">[ 想入門，我陪你 ] Re Vue 重頭說起｜ Day 9：基礎模組化</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>跟著大大一起從頭學Vue</tag>
      </tags>
  </entry>
</search>
